#!/usr/bin/bash
set -euo pipefail

# Lists symlinks in the host autostart directory and removes the selected one(s).
DIR_AUTOSTARTS="${HOME}/.dotfiles/configs/system/autostart"
DEST_HOST="${HOSTNAME:-unknown-host}"
PROMPT="Select symlink(s) to remove:"
NO_LIMIT=false

print_help() {
  cat <<EOF
Usage: $(basename "$0") [--host HOSTNAME] [--dir-autostarts DIR] [--prompt PROMPT] [--no-limit]

Removes selected symlink(s) from: \${DIR_AUTOSTARTS}/<hostname>/

Options:
  --host HOSTNAME     Override destination hostname directory (default: ${DEST_HOST} (local host))
  --dir-autostarts D  Base autostarts dir (default: ${DIR_AUTOSTARTS})
  --prompt PROMPT     Prompt text (default: "${PROMPT}")
  --no-limit          Allow selecting multiple items
  --help              Display this help and exit
EOF
}

# Parse args
while (( "$#" )); do
  case "$1" in
    --host) DEST_HOST="${2:-}"; shift 2 ;;
    --dir-autostarts) DIR_AUTOSTARTS="${2:-}"; shift 2 ;;
    --prompt) PROMPT="${2:-}"; shift 2 ;;
    --no-limit) NO_LIMIT=true; shift ;;
    --help) print_help; exit 0 ;;
    *) echo "Error: Unknown option: $1" >&2; print_help >&2; exit 1 ;;
  esac
done

# Pre-flight
if ! command -v gum >/dev/null 2>&1; then
  echo "Error: gum is not installed or not in PATH." >&2
  exit 1
fi

dest_dir="${DIR_AUTOSTARTS%/}/${DEST_HOST}"
if [[ ! -d "$dest_dir" ]]; then
  echo "Error: Host directory not found: '$dest_dir'" >&2
  exit 1
fi

# Collect only symlinks in host dir
shopt -s nullglob
entries=( "${dest_dir}"/* )
shopt -u nullglob

symlinks=()
for p in "${entries[@]}"; do
  [[ -L "$p" ]] && symlinks+=( "$p" )
done

if (( ${#symlinks[@]} == 0 )); then
  echo "No symlinks found in: '$dest_dir'" >&2
  exit 1
fi

# Build names for selection
names=()
for p in "${symlinks[@]}"; do
  names+=( "$(basename -- "$p")" )
done

# gum filter selection (supports unlimited with --no-limit)
gum_opts=( --placeholder "$PROMPT" )
if [[ "$NO_LIMIT" == true ]]; then
  gum_opts+=( --no-limit )
fi

if ! selected_out=$(printf '%s\n' "${names[@]}" | gum filter "${gum_opts[@]}"); then
  echo "No selection made." >&2
  exit 1
fi

# Normalize to array
selections=()
if [[ "$NO_LIMIT" == true ]]; then
  while IFS= read -r line; do
    [[ -n "$line" ]] && selections+=( "$line" )
  done <<< "$selected_out"
else
  selections=( "$selected_out" )
fi

# Remove each chosen symlink safely
for sel in "${selections[@]}"; do
  target_path="${dest_dir}/${sel}"
  if [[ -L "$target_path" ]]; then
    rm -f -- "$target_path"
    printf 'Removed symlink: %s\n' "$target_path"
  else
    printf 'Skipped non-symlink: %s\n' "$target_path" >&2
  fi
done
