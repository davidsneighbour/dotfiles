#!/bin/bash
################################################################################
# Dotbot wrapper script
# 
# @see https://github.com/davidsneighbour/dotfiles
################################################################################

set -euo pipefail

print_help() {
  cat <<'EOF'
Usage: dotbot [--debug] [<config-name>]

Runs Dotbot from the repository root. If <config-name> is given and a matching
configs/dotbot/config.<config-name>.yaml exists, it will be used. Otherwise the
default configs/dotbot/config.yaml is used.

Options:
  --debug        Enable verbose -vv output
  -h, --help     Show this help

Examples:
  dotbot
  dotbot setup
  dotbot clean
  dotbot --debug setup
EOF
}

# ----------------------------
# Resolve repo root (works via symlink)
# ----------------------------
SCRIPT_PATH="$(readlink -f "${BASH_SOURCE[0]}")"
REPO_ROOT="$(cd "$(dirname "${SCRIPT_PATH}")/.." && pwd)"

# ----------------------------
# CLI args
# ----------------------------
DEBUG_FLAG=""
CONFIG_NAME=""

for arg in "$@"; do
  case "${arg}" in
    --debug)
      DEBUG_FLAG="-vv"
      ;;
    -h|--help)
      print_help
      exit 0
      ;;
    *)
      CONFIG_NAME="${arg}"
      ;;
  esac
done

# ----------------------------
# Config selection
# ----------------------------
if [[ -n "${CONFIG_NAME}" ]]; then
  ALT_CONFIG="${REPO_ROOT}/configs/dotbot/config.${CONFIG_NAME}.yaml"
  if [[ -f "${ALT_CONFIG}" ]]; then
    DOTBOT_CONFIG="${ALT_CONFIG}"
  else
    echo "Error: Config file '${ALT_CONFIG}' not found." >&2
    exit 1
  fi
else
  DOTBOT_CONFIG="${REPO_ROOT}/configs/dotbot/config.yaml"
fi

# ----------------------------
# Paths
# ----------------------------
DOTBOT_DIR="${REPO_ROOT}/modules/dotbot"
DOTBOT_BIN="${DOTBOT_DIR}/bin/dotbot"

# ----------------------------
# Ensure submodule present
# ----------------------------
if [[ -d "${DOTBOT_DIR}" ]]; then
  if [[ "${DOTBOT_VERBOSE-}" == "1" ]]; then
    git -C "${REPO_ROOT}" submodule sync --recursive
    git -C "${REPO_ROOT}" submodule update --init --recursive "${DOTBOT_DIR#${REPO_ROOT}/}"
  else
    git -C "${REPO_ROOT}" submodule sync --quiet --recursive
    git -C "${REPO_ROOT}" submodule update --init --recursive "${DOTBOT_DIR#${REPO_ROOT}/}" >/dev/null 2>&1
  fi
fi

# ----------------------------
# Execute from repo root
# ----------------------------
export HOSTNAME="$(hostname)"
cd "${REPO_ROOT}"

if [[ ! -x "${DOTBOT_BIN}" ]]; then
  echo "Error: Dotbot binary not found or not executable at '${DOTBOT_BIN}'." >&2
  exit 1
fi

"${DOTBOT_BIN}" \
  --base-directory "${REPO_ROOT}" \
  --config-file "${DOTBOT_CONFIG}" \
  --force-color \
  --exit-on-failure \
  ${DEBUG_FLAG}

STATUS=$?
if [[ $STATUS -eq 0 ]]; then
  echo "✅ Dotbot finished successfully."
else
  echo "❌ Dotbot failed with exit code $STATUS."
fi

exit $STATUS
