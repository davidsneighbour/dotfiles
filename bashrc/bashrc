# if not running interactively, don't do anything
case $- in
*i*) ;;
*) return ;;
esac

# manually done for now
DOTFILES_PATH="${HOME}/github.com/davidsneighbour/dotfiles"
BASHRC_PATH="${DOTFILES_PATH}/bashrc"

force_color_prompt=yes
export force_color_prompt

# load the helper functions
for FILE in "${BASHRC_PATH}"/_lib/*; do
  # shellcheck disable=SC1090 # we check the files for existence and readability
  [[ -f "${FILE}" && -r "${FILE}" ]] && source "${FILE}"
done

# export the .env file
FILE="${HOME}"/.env
if [[ -f "${FILE}" && -r "${FILE}" ]]; then
  set -a
  # shellcheck source=/dev/null
  source "${FILE}"
  set +a
fi
unset FILE

for FILE in "${BASHRC_PATH}"/partials/{eval,bash,functions,exports,aliases,completions,prompt}; do
  # this routine ranges through a folder of filenames that we don't explicitly know (@davidsneighbour)
  # shellcheck source=/dev/null
  [[ -f "${FILE}" && -r "${FILE}" ]] && source "${FILE}"
done
unset FILE

# shellcheck source=home/.cargo/env
if [ -f "${HOME}/.cargo/env" ]; then
  # shellcheck source=/dev/null
  source "${HOME}/.cargo/env"
fi

export NVM_DIR="${HOME}/.nvm"
# shellcheck source=/dev/null
[ -s "${NVM_DIR}/nvm.sh" ] && \. "${NVM_DIR}/nvm.sh" # This loads nvm
# shellcheck source=/dev/null
[ -s "${NVM_DIR}/bash_completion" ] && \. "${NVM_DIR}/bash_completion" # This loads nvm bash_completion

# hack to disable error messages about max listeners
export NODE_OPTIONS="--require ${BASHRC_PATH}/helpers/set_max_listeners.cjs ${NODE_OPTIONS}"

eval "$(zoxide init bash)"

# shellcheck disable=SC1091
[ -s "${NVM_DIR}/bash_completion" ] && \. "${NVM_DIR}/bash_completion" # This loads nvm bash_completion

eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
# shellcheck disable=SC1091
. "${HOME}/.cargo/env"

# bun
export BUN_INSTALL="${HOME}/.bun"
export PATH="${BUN_INSTALL}/bin:${PATH}"

GPG_TTY=$(tty)
export GPG_TTY

# the default umask is set in /etc/profile; for setting the umask
# for ssh logins, install and configure the libpam-umask package.
umask 022

# bash (and history) config
export HISTCONTROL=ignoreboth:erasedups # remove duplicate lines or lines starting with space from history
export HISTFILESIZE=                    # unlimited history size
export HISTSIZE=
shopt -s histappend              # append to the history file, don't overwrite it
shopt -s histverify              # don't execute history searched lines, put them in the shell
shopt -s extglob                 # extended pattern matching features (required for bash completion)
shopt -s dotglob                 # for considering dot files (turn on dot files)
shopt -s cdspell                 # correct dir spelling errors on cd
shopt -s lithist                 # save multi-line commands with newlines
shopt -s autocd                  # if a command is a dir name, cd to it
shopt -s checkjobs               # print warning if jobs are running on shell exit
shopt -s dirspell                # correct dir spelling errors on completion
shopt -s globstar                # ** matches all files, dirs and subdirs
shopt -s cmdhist                 # save multi-line commands in a single hist entry
shopt -s cdable_vars             # if cd arg is not a dir, assume it is a var
shopt -s checkwinsize            # check the window size after each command
shopt -s no_empty_cmd_completion # don't try to complete empty cmds

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
  debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt
export color_prompt=yes

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    source /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    source /etc/bash_completion
  fi
fi

# shellcheck disable=SC2154 # we know the variable is initialised
FILE="${BASHRC_PATH}"/etc/paths
if test -f "${FILE}"; then
  while IFS= read -r line; do
    if [ -d "$(dirname "${line}")" ]; then
      PATH=${line}:${PATH}
    fi
  done <"${FILE}"
fi

# Android and npm require special treatment
# @todo recheck if this is still needed
if [ -d "${HOME}"/.bin/android-sdk ]; then
  PATH=${HOME}/.bin/android-sdk/tools:"${HOME}"/.bin/android-sdk/platform-tools:"${PATH}"
  export ANDROID_HOME="${HOME}"/.bin/android/sdk
fi
if [ -d "${HOME}"/.npm ]; then
  PATH="${PATH}":"${HOME}"/.npm/bin:"${HOME}"/.npm/packages/bin
  export NODE_PATH="${NODE_PATH}":"${HOME}"/.npm/lib/node_modules
fi

PATH=/opt/firefox/firefox:${PATH}
PATH="/home/patrick/snap/deno/86/.deno/bin:${PATH}"

# aaaaand export...
export PATH

# don't add jrnl entries to bash history
HISTIGNORE="${HISTIGNORE}:jrnl *"

export GOPATH=${HOME}/.go
export PERL5LIB=${HOME}/.perl5
export PERLLIB=${HOME}/.perl5

export PAGER='less -i'

set -o notify # Report status of terminated bg jobs immediately
set -o emacs  # emacs-style editing

# enable coloured man pages
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'

# define some colours
export GREY=$'\033[1;30m'
export RED=$'\033[1;31m'
export GREEN=$'\033[1;32m'
export YELLOW=$'\033[1;33m'
export BLUE=$'\033[1;34m'
export MAGENTA=$'\033[1;35m'
export CYAN=$'\033[1;36m'
export WHITE=$'\033[1;37m'
export NONE=$'\033[m'

# grep colors
export GREP_COLORS="mt=1;38;2;255;85;85:fn=38;2;255;121;198:ln=38;2;80;250;123:bn=38;2;80;250;123:se=38;2;139;233;253"

# path for directories
export CDPATH=".:..:../..:~/:~/dev/"

# file containing hosts
export HOSTFILE=~/.bash_hosts

# see https://wiki.archlinux.org/index.php/GTK+#Suppress_warning_about_accessibility_bus
export NO_AT_BRIDGE=1

eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

export DENO_INSTALL="/home/patrick/.deno"
export PATH="${DENO_INSTALL}/bin:${PATH}"

# starship setup
# see https://starship.rs/config
# export STARSHIP_CONFIG=~/example/non/default/path/starship.toml
export STARSHIP_CACHE=~/.cache/starship
export STARSHIP_CONFIG=~/.config/starship.toml

# Check if we are running the first time or being reloaded
if [[ -z "${BASHRC_LOADED}" ]]; then
  export BASHRC_LOADED=true
  if command -v starship >/dev/null 2>&1; then
    eval "$(starship init bash)"
  else
    [[ -n "${DNB_VERBOSE}" ]] && echo "Note: Starship is not installed. Skipping prompt setup."
  fi
else
  [[ -n "${DNB_VERBOSE}" ]] && echo "Note: Skipping Starship initialization on sourced .bashrc"
fi
