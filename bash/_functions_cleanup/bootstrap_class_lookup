#!/bin/bash
# shellcheck shell=bash

bootstrap_class_lookup() {
  local class=""
  local version="__USE_CACHED__"
  local default_version="5.3.3"
  local version_file="${HOME}/.cache/bootstrap-css/.version"
  local keep_important=false
  local sloppy=false
  local no_color=false
  local copy_full=false
  local cdn_url
  local cache_dir="${HOME}/.cache/bootstrap-css"
  local cache_file

  if [[ $# -eq 1 && "${1}" != --* ]]; then
    class="$1"
    shift
  fi

  while [[ $# -gt 0 ]]; do
    case "$1" in
    --class)
      class="$2"
      shift 2
      ;;
    --version)
      version="$2"
      shift 2
      ;;
    --latest)
      version="${default_version}"
      shift
      ;;
    --clear-version)
      rm -f "${version_file}"
      echo "üóëÔ∏è  Cleared cached Bootstrap version."
      return 0
      ;;
    --keep-important)
      keep_important=true
      shift
      ;;
    --sloppy)
      sloppy=true
      shift
      ;;
    --no-color)
      no_color=true
      shift
      ;;
    --copy-full)
      copy_full=true
      shift
      ;;
    --help | -h)
      echo "Usage:"
      echo "  ${FUNCNAME[0]} CLASSNAME"
      echo "  ${FUNCNAME[0]} --class CLASSNAME [--version VERSION] [--sloppy] [--keep-important] [--no-color] [--copy-full]"
      echo
      echo "Options:"
      echo "  --class           Class to extract (e.g. text-end)"
      echo "  --version         Bootstrap version (and save it for future use)"
      echo "  --latest          Use latest default version (${default_version})"
      echo "  --clear-version   Remove version pinning"
      echo "  --sloppy          Match everything starting with class (e.g. .rounded-*)"
      echo "  --keep-important  Keep !important in CSS output"
      echo "  --no-color        Disable selector highlighting"
      echo "  --copy-full       Copy full rule block(s) instead of just inner body"
      return 0
      ;;
    *)
      echo "Unknown option: $1"
      echo
      "${FUNCNAME[0]}" --help
      return 1
      ;;
    esac
  done

  if [[ -z "${class}" ]]; then
    echo "Error: --class is required"
    echo
    "${FUNCNAME[0]}" --help
    return 1
  fi

  if [[ "${version}" == "__USE_CACHED__" ]]; then
    if [[ -f "${version_file}" ]]; then
      version=$(<"${version_file}")
    else
      version="${default_version}"
    fi
  else
    echo "${version}" >"${version_file}"
  fi

  class="${class#.}"
  cdn_url="https://cdn.jsdelivr.net/npm/bootstrap@${version}/dist/css/bootstrap.min.css"
  cache_file="${cache_dir}/bootstrap-${version}.min.css"
  mkdir -p "${cache_dir}"

  if [[ ! -f "${cache_file}" ]]; then
    echo "‚¨áÔ∏è  Downloading Bootstrap v${version}..."
    curl -sSfL "${cdn_url}" -o "${cache_file}"
  fi

  echo "üîç Searching for '.${class}' in Bootstrap v${version}..."

  if [[ -f "${version_file}" ]]; then
    echo "‚ÑπÔ∏è  Using cached Bootstrap version ${version} (set via --version)"
    echo "    Use --latest or --version X.Y.Z to override."
  fi

  if [[ "${version}" == "${default_version}" ]]; then
    echo "‚úÖ You are using the latest Bootstrap version."
  else
    echo "‚ö†Ô∏è  Version pinned to ${version} ‚Äî newer version ${default_version} is available."
  fi

  local raw_match
  if [[ "${sloppy}" == true ]]; then
    raw_match=$(awk -v class="${class}" 'BEGIN { RS="}"; ORS="}\n" } $0 ~ "\\." class { print }' "${cache_file}")
  else
    raw_match=$(awk -v class="${class}" 'BEGIN { RS="}"; ORS="}\n" } $0 ~ ("^\\." class "([^a-zA-Z0-9_-]|\\s|\\{|$)") { print }' "${cache_file}")
  fi

  if [[ -z "${raw_match// /}" ]]; then
    echo "‚ö†Ô∏è  Class '.${class}' not found in Bootstrap ${version}"
    return 1
  fi

  if [[ "${keep_important}" == false ]]; then
    raw_match=$(echo "${raw_match}" | sed 's/ *!important//g')
  fi

  echo "‚úÖ Found:"
  echo

  local formatted
  formatted=$(echo "${raw_match}" |
    sed 's/{/ {\n  /' |
    sed 's/;/;\n  /g' |
    sed 's/ *}$/\n}/' |
    sed -E '/^\s+[^};]+[^;}]$/s/$/;/')

  if [[ "${no_color}" == false ]]; then
    formatted=$(echo "${formatted}" | sed -E "s/^(\.${class})([^a-zA-Z0-9_-]|$)/\x1b[1;33m\1\x1b[0m\2/")
  fi

  echo "${formatted}"

  local inner
  inner=$(echo "${formatted}" | awk '
    BEGIN { in_block = 0 }
    /{$/ { in_block = 1; next }
    /^}$/ { in_block = 0; next }
    in_block { print }
  ')

  if [[ -n "${inner}" ]]; then
    local rule_count
    rule_count=$(echo "${raw_match}" | grep -cE '^\.')
    local to_copy=""

    if [[ "${copy_full}" == true ]]; then
      to_copy="${formatted}"
    elif [[ "${rule_count}" -eq 1 ]]; then
      to_copy="${inner}"
    fi

    if [[ -n "${to_copy}" ]]; then
      to_copy=$(echo "${to_copy}" |
        sed -E '/^\s+[^};]+[^;}]$/s/$/;/' |
        sed 's/\x1b\[[0-9;]*m//g')

      if command -v xclip >/dev/null 2>&1; then
        printf "%s\n" "${to_copy}" | xclip -selection clipboard
        echo
        echo "üìã Copied to clipboard using xclip."
      elif command -v pbcopy >/dev/null 2>&1; then
        printf "%s\n" "${to_copy}" | pbcopy
        echo
        echo "üìã Copied to clipboard using pbcopy."
      elif command -v wl-copy >/dev/null 2>&1; then
        printf "%s\n" "${to_copy}" | wl-copy
        echo
        echo "üìã Copied to clipboard using wl-copy."
      else
        echo
        echo "‚ö†Ô∏è  No clipboard tool found. Copy manually."
      fi
    else
      echo "üìÑ Multiple rules found ‚Äî output only, clipboard not used."
    fi
  fi
}
