# shellcheck shell=bash

# @todo review and refactor

# display git branches and their upstream branches
function git_branches() {
  local remote_color="\e[32m"
  local no_remote_color="\e[31m"
  local reset_color="\e[0m"

  printf "%-30s %-30s\n" "Branch" "Upstream"
  printf "%-30s %-30s\n" "------" "--------"

  git branch --format='%(refname:short) %(upstream)' | while read -r branch; do
    branch_name=$(echo "${branch}" | awk '{print $1}')
    upstream=$(echo "${branch}" | awk '{print $2}')

    if [ -z "${upstream}" ]; then
      printf "${no_remote_color}%-30s${reset_color} %-30s\n" "${branch_name}" "${upstream}"
    else
      printf "${remote_color}%-30s${reset_color} %-30s\n" "${branch_name}" "${upstream}"
    fi
  done
}

# Synchronizes all remote branches from origin, setting them up to track their remote counterparts if not already existing.
function git_branches_synch() {
  # Fetch all remote branches safely
  if ! git fetch --all; then
    echo "Failed to fetch remote branches."
    return 1
  fi

  # Loop over each remote branch from 'origin', except those that are remote HEAD pointers like 'origin/HEAD -> origin/main'
  git branch -r | grep -v '\->' | sed "s,\x1B\[[0-9;]*[a-zA-Z],,g" | while read -r remote; do
    local branch="${remote#origin/}"
    # Check if the local branch already exists
    if ! git rev-parse --verify "$branch" >/dev/null 2>&1; then
      # If it doesn't exist, track the remote branch
      if ! git branch --track "$branch" "$remote"; then
        echo "Failed to track branch '$branch' from '$remote'."
      fi
    else
      echo "Branch '$branch' already exists, skipping tracking."
    fi
  done

  # Pull all updates
  if ! git pull --all; then
    echo "Failed to pull all updates."
    return 1
  fi
}

# Help functionality
function git_branches_synch_help() {
  echo "Usage: git_branches_synch"
  echo "Synchronizes all remote branches from 'origin', setting them up to track their remote counterparts if not already existing."
}
