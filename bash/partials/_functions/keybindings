# shellcheck shell=bash

export_keybindings() {
    if [[ "$1" == "--help" ]]; then
        echo "Usage: ${FUNCNAME[0]} <filename>"
        echo "Export GNOME keybindings to the specified file."
        echo
        echo "Arguments:"
        echo "  <filename>    The file where keybindings will be saved."
        echo
        echo "Notice:"
        echo "  It is recommended to use the keybindingsmanager script instead:"
        echo "  ./$(basename "$0") --export <filename>"
        echo
        echo "Part of DNB's dotfiles: https://github.com/davidsneighbour/dotfiles/"
        return 0
    fi

    local filename="$1"
    if [[ -z "$filename" ]]; then
        echo "Error: No filename specified. Use --help for usage information." >&2
        return 1
    fi

    echo "Exporting keybindings to $filename"

    local gsettings_folders=(
        "org.gnome.desktop.wm.keybindings"
        "org.gnome.settings-daemon.plugins.power"
        "org.gnome.settings-daemon.plugins.media-keys"
    )
    local custom_bindings
    custom_bindings=$(dconf list /org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/ | tr -d '/')

    {
        for folder in "${gsettings_folders[@]}"; do
            gsettings list-recursively "$folder" | while read -r line; do
                if [[ "$line" =~ ^([^[:space:]]+)[[:space:]]+([^[:space:]]+)[[:space:]]+(.+)$ ]]; then
                    echo -e "${BASH_REMATCH[1]}\t${BASH_REMATCH[2]}\t${BASH_REMATCH[3]}"
                else
                    echo "Warning: Could not parse line: $line" >&2
                fi
            done
        done

        for custom in $custom_bindings; do
            local folder="/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/${custom}/"
            echo -e "custom\t$(dconf read "${folder}name")\t$(dconf read "${folder}command")\t$(dconf read "${folder}binding")"
        done
    } > "$filename"

    echo "Keybindings exported successfully."
}

import_keybindings() {
    if [[ "$1" == "--help" ]]; then
        echo "Usage: ${FUNCNAME[0]} <filename>"
        echo "Import GNOME keybindings from the specified file."
        echo
        echo "Arguments:"
        echo "  <filename>    The file containing keybindings to import."
        echo
        echo "Notice:"
        echo "  It is recommended to use the keybindingsmanager script instead:"
        echo "  ./$(basename "$0") --import <filename>"
        echo
        echo "Part of DNB's dotfiles: https://github.com/davidsneighbour/dotfiles/"
        return 0
    fi

    local filename="$1"
    if [[ -z "$filename" ]]; then
        echo "Error: No filename specified. Use --help for usage information." >&2
        return 1
    fi

    echo "Importing keybindings from $filename"

    if [[ ! -f "$filename" ]]; then
        echo "Error: File $filename does not exist." >&2
        return 1
    fi

    local custom_count=0
    local custom_list=""

    while IFS=$'\t' read -r type name_or_path command_or_name binding_or_value; do
        if [[ "$type" == "custom" ]]; then
            local folder="/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom${custom_count}/"
            dconf write "${folder}name" "$name_or_path"
            dconf write "${folder}command" "$command_or_name"
            dconf write "${folder}binding" "$binding_or_value"
            custom_list+="'${folder}',"
            custom_count=$((custom_count + 1))
        else
            gsettings set "$type" "$name_or_path" "$command_or_name"
        fi
    done < "$filename"

    if [[ $custom_count -gt 0 ]]; then
        dconf write /org/gnome/settings-daemon/plugins/media-keys/custom-keybindings "[${custom_list%,}]"
    fi

    echo "Keybindings imported successfully."
}

keybindingsmanager() {
    if [[ "$1" == "--help" || -z "$1" ]]; then
        echo "Usage: ${FUNCNAME[0]} [OPTIONS]"
        echo "Options:"
        echo "  -e, --export <filename>     Export keybindings to the specified file"
        echo "  -i, --import <filename>     Import keybindings from the specified file"
        echo "  -h, --help                  Show this help message"
        echo
        echo "This script provides a convenient way to manage GNOME keybindings."
        echo
        echo "Part of DNB's dotfiles: https://github.com/davidsneighbour/dotfiles/"
        return 0
    fi

    local action=""
    local filename=""

    while [[ $# -gt 0 ]]; do
        case "$1" in
            -e|--export)
                action="export"
                filename="$2"
                shift 2
                ;;
            -i|--import)
                action="import"
                filename="$2"
                shift 2
                ;;
            -h|--help)
                ${FUNCNAME[0]} --help
                return 0
                ;;
            *)
                echo "Error: Unknown argument $1. Use --help for usage information." >&2
                return 1
                ;;
        esac
    done

    if [[ -z "$filename" ]]; then
        echo "Error: No filename specified. Use --help for usage information." >&2
        return 1
    fi

    if [[ "$action" == "export" ]]; then
        export_keybindings "$filename"
    elif [[ "$action" == "import" ]]; then
        import_keybindings "$filename"
    else
        echo "Error: Unknown action $action. Use --help for usage information." >&2
        return 1
    fi
}

generate_keybindings_page() {
    if [[ "$1" == "--help" ]]; then
        echo "Usage: ${FUNCNAME[0]} --file <csvfile> --output <htmlfile>"
        echo "Generate an HTML page from a CSV file with GNOME keybindings."
        echo
        echo "Arguments:"
        echo "  --file <csvfile>     The CSV file containing the keybindings."
        echo "  --output <htmlfile>  The file where the keybindings page will be saved."
        echo
        echo "Part of DNB's dotfiles: https://github.com/davidsneighbour/dotfiles/"
        return 0
    fi

    local csv_file=""
    local output_file=""

    while [[ $# -gt 0 ]]; do
        case "$1" in
            --file)
                csv_file="$2"
                shift 2
                ;;
            --output)
                output_file="$2"
                shift 2
                ;;
            --help)
                ${FUNCNAME[0]} --help
                exit 0
                ;;
            *)
                echo "Error: Unknown argument $1. Use --help for usage information." >&2
                exit 1
                ;;
        esac
    done

    if [[ -z "$csv_file" || -z "$output_file" ]]; then
        echo "Error: Both --file and --output parameters are required." >&2
        exit 1
    fi

    if [[ ! -f "$csv_file" ]]; then
        echo "Error: CSV file '$csv_file' does not exist." >&2
        exit 1
    fi

    {
        echo "<!DOCTYPE html>"
        echo "<html lang='en'>"
        echo "<head>"
        echo "    <meta charset='UTF-8'>"
        echo "    <meta name='viewport' content='width=device-width, initial-scale=1.0'>"
        echo "    <title>GNOME Keybindings</title>"
        echo "    <style>"
        echo "        body { font-family: Arial, sans-serif; margin: 20px; }"
        echo "        h2 { border-bottom: 2px solid #000; padding-bottom: 5px; }"
        echo "        table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }"
        echo "        th, td { border: 1px solid #ccc; padding: 8px; text-align: left; }"
        echo "        th { background-color: #f4f4f4; }"
        echo "        kbd { background: #eee; border-radius: 3px; padding: 2px 4px; font-family: monospace; }"
        echo "    </style>"
        echo "</head>"
        echo "<body>"
        echo "    <h1>GNOME Keybindings</h1>"

        local current_category=""

        while IFS=$'\t' read -r category function keybinding; do
            if [[ "$category" != "$current_category" ]]; then
                if [[ -n "$current_category" ]]; then
                    echo "    </table>"
                fi
                echo "    <h2>${category}</h2>"
                echo "    <table>"
                echo "        <tr><th>Function</th><th>Key Combination</th></tr>"
                current_category="$category"
            fi

            # Clean up keybinding string: remove brackets and split into keys
            keybinding=$(echo "$keybinding" | sed -E "s/^\['|'\]$//g; s/', '/ /g")

            # Convert special keys
            formatted_keys=""
            for key in $keybinding; do
                key=$(echo "$key" | sed -E "s/<(.*)>/\U\1/") # Remove <> and uppercase
                formatted_keys+="<kbd>${key}</kbd> "
            done

            echo "        <tr><td>${function}</td><td>${formatted_keys}</td></tr>"
        done < "$csv_file"

        echo "    </table>"
        echo "</body>"
        echo "</html>"
    } > "$output_file"

    echo "Keybindings page generated successfully at $output_file."
}
