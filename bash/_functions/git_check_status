#!/bin/bash

# @todo review and refactor

# Function to iterate through folders and display git status
function git_check_status() {
  # Function to display help message
  display_help() {
    echo "Usage: git_check_status [-h] [--help] [-f <folder>] [-c <config_file>]"
    echo "Options:"
    echo "  -h, --help             Display help"
    echo "  -f, --folder <folder>  Specify a folder containing git repositories"
    echo "  -c, --config <file>    Specify a config file containing folder locations"
    return 1
  }

  # ANSI color codes
  RED='\033[0;31m'
  BOLD_RED='\033[1;31m'
  GREEN='\033[0;32m'
  YELLOW='\033[0;33m'
  BOLD_YELLOW='\033[1;33m'
  NC='\033[0m' # No Color

  # Initialize variables
  local folder_arg=""
  local config_file=""

  # Parse command-line arguments
  while [[ $# -gt 0 ]]; do
    case $1 in
    -h | --help)
      display_help
      return 1
      ;;
    -f | --folder)
      folder_arg="$2"
      shift 2
      ;;
    -c | --config)
      config_file="$2"
      shift 2
      ;;
    *)
      echo "Error: Invalid argument"
      display_help
      return 1
      ;;
    esac
  done

  # Check if both folder and config file are provided
  if [ -n "${folder_arg}" ] && [ -n "${config_file}" ]; then
    echo "Error: Both folder and config file cannot be specified together"
    display_help
    return 1
  fi

  # display git status for a folder
  function display_git_status() {
    local folder_to_check="$1"
    local changes=""

    # print folder name
    echo -e "${BOLD_RED}Git status for repositories in ${folder_to_check}:${NC}"

    # iterate through all subfolders
    while IFS= read -r repo; do
      # change directory to the repository
      cd "${repo}" || {
        echo "Error: Unable to change directory to ${repo}"
        continue
      }

      # check if folder is a git repository
      if [ -d .git ]; then
        # check if repository has changes
        if ! git diff --quiet; then
          # collect changes into a string
          changes+="\n${RED}Repository: ${repo}${NC}\n$(git status --short)\n"
        fi
      else
        echo "Not a git repository: ${repo}"
      fi

      # move back to the original directory
      cd - >/dev/null || {
        echo "Error: Unable to change back to the original directory"
        continue
      }
    done < <(find "${folder_to_check}" -type d -name .git | sed 's/\/.git$//')

    # print changes if any
    if [ -n "${changes}" ]; then
      echo -e "${changes}"
    else
      echo "No repositories with changes found in ${folder_to_check}"
    fi

    # print color reset code
    echo -e "${NC}"
  }

  # if folder is provided, display git status for repositories within that folder
  if [ -n "${folder_arg}" ]; then
    if [ -d "${folder_arg}" ]; then
      display_git_status "${folder_arg}"
    else
      echo "Error: Folder '${folder_arg}' does not exist"
      return 1
    fi
  fi

  # if config file is provided, read folders from the config file and display git status for each folder
  if [ -n "${config_file}" ]; then
    # check if config file exists
    if [ -f "${config_file}" ]; then
      # read config file and iterate through folders
      while IFS= read -r folder_line || [ -n "${folder_line}" ]; do
        if [ -d "${folder_line}" ]; then
          display_git_status "${folder_line}"
        else
          echo "Error: Folder '${folder_line}' does not exist"
        fi
      done <"${config_file}"
    else
      echo "Error: Config file '${config_file}' not found"
      return 1
    fi
  fi

  # if neither folder nor config file is provided, display help
  if [ -z "${folder_arg}" ] && [ -z "${config_file}" ]; then
    display_help
    return 1
  fi
}
