[user]
	email = patrick@davids-neighbour.com
	name = Patrick Kollitsch
	signingkey = 09BAD1289A5260478E6BA54D5A5360B005AD68C7

[apply]
whitespace = fix

[credential]
helper = store

[core]
autocrlf = input
editor = subl -n -w
filemode = false
excludesfile = ~/.gitignore
attributesfile = ~/.gitattributes
whitespace = space-before-tab,-indent-with-non-tab,trailing-space

# http://blog.cuviper.com/2013/11/10/how-short-can-git-abbreviate/- use 12 characters for the hash
abbrev = 12

# see http://stackoverflow.com/q/18257622/276478 - enable parallel I/O for operations like git diff
preloadindex = true

# deltasetup
pager=delta

[diff]
algorithm = histogram # better diffs, require more time
renames = copies      # detect copies as renames

[merge]
tool = meld
log = true # add a list of merged commits to the autogenerated commit message.

[color]
diff = auto
stats = auto
branch = auto
ui = auto

[color.grep]
filename = bold green
match = black yellow

[color "branch"]
current = yellow reverse
local = yellow
remote = green

[color "diff"]
meta = yellow bold
frag = magenta bold # line info
old = red           # deletions
new = green         # additions

[color "status"]
added = yellow
changed = green
untracked = cyan

[push]
# makes `git push` or `git push <remote>` only push the current branch to
# the tracked branch (regardless of its remote name).
# @see http://longair.net/blog/?p=572
default = upstream
# allows to `git push` a new branch to remote without adding it first
autoSetupRemote = true
followtags = true

[help]
# automatically correct and execute mistyped commands
autocorrect = 10

[alias]
commit = commit --signoff
# merge all commits of a branch into one single commit
squash-all = "!f(){ git reset $(git commit-tree HEAD^{tree} -m \"${1:-chore: initial commit}\");};f"

hist = log --graph --pretty=format:'%Cred%h%Creset %C(cyan)%an%Creset - %C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
player = shortlog -sn
sneak = commit --amend --no-edit
co = checkout
ci = commit
st = status
br = branch
type = cat-file -t
dump = cat-file -p
lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
branchdate = !git for-each-ref --sort='-authordate' --format='%(refname)%09%(authordate)' refs/heads | sed -e 's-refs/heads/--'
lllllll = log --pretty=oneline --abbrev-commit --graph --decorate

# When doing "git git log" or some such, do not complain about "git" not
# being a valid Git command. This happens when copy-pasting examples, for
# instance.
git = !git

# Quickly view the latest commits using a helper script to massage the
# "git log" output.
l = tilde-log

# Like "git l", but show all and draw the history graph, too.
ll = tilde-log --graph

# Like "git l", but for the reflog.
rl = tilde-reflog

# Show a concise status of the working directory, along with the branch
# and the number of commits behind and/or ahead.
s = status --short --branch

# Show the staged changes.
dc = diff --cached

# Like "git show myfile", but uses the last commit that changed "myfile".
showlast = log -n 1 -p

# Switch branches, creating them if necessary. I want to unlearn using
# "git checkout" for switching between branches because of the possible
# dataloss when not paying attention. (You could see the PEBKAC, but I
# could reply with another four letter acronym, slightly resembling TOFU.)
#
# Suppose I have modified a file named "password" and have two branches,
# "password-expiry-mechanism" and "password-reset-mail". If I want to
# switch to either branch, I would type "git checkout pass<Tab><Enter>",
# but the autocomplete would stop at "git checkout password" because of
# the ambiguity. Because I press <Enter> without really thinking, I have
# now reset my "password" file. With "git go pass<Tab><Enter>", I would
# simply have created a new branch called "password". (I would be forced
# to use "--" to separate paths from banch names, which is a Good Thing™.)
go = checkout -B

# Make "git grep" look a bit like "ack"/"ag". Note that you need to
# specify --no-index to search all files, and that submodules are not
# searched.
ack = grep --extended-regexp --break --heading --line-number

# update submodules
update = submodule update --recursive --remote

# View abbreviated SHA, description, and history graph of the latest 20 commits
l = log --pretty=oneline -n 20 --graph --abbrev-commit

# View the current working tree status using the short format
s = status -s

# Show the diff between the latest commit and the current state
d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

# `git di $number` shows the diff between the state `$number` revisions ago and the current state
di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

# Pull in remote changes for the current repository and all its submodules
p = !"git pull; git submodule foreach git pull origin master"

# Clone a repository including all submodules
c = clone --recursive

# Commit all changes
ca = !git add -A && git commit -av

# Switch to a branch, creating it if necessary
go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

# Show verbose output about tags, branches or remotes
tags = tag -l
branches = branch -a
remotes = remote -v

# Amend the currently staged files to the latest commit
amend = commit --amend --reuse-message=HEAD

# Credit an author on the latest commit
credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

# Interactive rebase with the given number of latest commits
reb = "!r() { git rebase -i HEAD~$1; }; r"

# Find branches containing commit
fb = "!f() { git branch -a --contains $1; }; f"

# Find tags containing commit
ft = "!f() { git describe --always --contains $1; }; f"

# Find commits by source code
fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

# Find commits by commit message
fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

# Remove branches that have already been merged with master
# a.k.a. ‘delete merged’
dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

# List contributors with number of commits
contributors = shortlog --summary --numbered

# show last commit with signature
last = log --show-signature -1

# stashing
stash-untracked = "!f() { git stash; git stash -u; git stash pop stash@{1}; }; f"
ignore = "!gi() { curl -sL https://www.toptal.com/developers/gitignore/api/$@;}; gi"
stash-content = "!f() { git stash push -u -m 'wip: new content' content; }; f"

# Rebasing - https://notes.zander.wtf/notes/git-rebasing/
mainbranch = "!git remote show origin | sed -n '/HEAD branch/s/.*: //p'"
sync = "!git pull origin $(git mainbranch) --rebase"
update = "!git pull origin $(git rev-parse --abbrev-ref HEAD) --rebase"
squash = "!git rebase -v -i $(git mainbranch)"
publish = push origin HEAD --force-with-lease
pub = publish

[commit]
gpgsign = true
verbose = true

[init]
defaultBranch = main
templatedir = ~/.git-templates

# [includeIf "gitdir:~/work/"]
# path = ~/.gitconfig.work

[interactive]
diffFilter = delta --color-only --features=interactive

################################################################################
# Delta configuration
################################################################################
[delta]
features = side-by-side line-numbers decorations
syntax-theme = Dracula
plus-style = syntax "#003800"
minus-style = normal "#3f0001"

[delta "interactive"]
keep-plus-minus-markers = false

[delta "decorations"]
commit-decoration-style = bold yellow box ul
commit-style = raw
file-style = bold yellow ul
file-decoration-style = none
hunk-header-decoration-style = cyan box ul
hunk-header-file-style = red
hunk-header-line-number-style = "#067a00"
hunk-header-style = file line-number syntax

[delta "line-numbers"]
line-numbers-left-style = cyan
line-numbers-right-style = cyan
line-numbers-minus-style = 124
line-numbers-plus-style = 28
[gpg]
program = gpg
# format = ssh
[protocol "keybase"]
allow = always

################################################################################
# URL shorthands
################################################################################
# [url "git@github.com:"]
# insteadOf = "gh:"
# pushInsteadOf = "github:"
# pushInsteadOf = "git://github.com/"

[url "git@github.com:"]
insteadOf = "https://github.com/"

[rebase]
autosquash = true # https://jvns.ca/blog/2024/02/16/popular-git-config-options/#rebase-autosquash-true
autostash = true
[rerere]
enabled = true
[transfer]
fsckobjects = true
[fetch]
fsckobjects = true
prune = true
prunetags = true
[receive]
fsckObjects = true

# submodules
[status]
submoduleSummary = true
[diff]
submodule = log
colorMoved = default
colorMovedWS = allow-indentation-change
context = 10
[submodule]
recurse = true
[log]
date = iso
[pull]
rebase = true
[branch]
sort = -committerdate
[maintenance]
repo = /home/patrick/github.com/davidsneighbour/kollitsch.dev
